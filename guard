#!/bin/bash

service=atd
runDir="/opt/guardian"
logFile="$runDir/guard-"`date +"%Y-%m-%d"`".log"
logMaxSize=1024   # 1mb
runInterval=10 # In seconds
service_command=/etc/init.d/$service
service_retries=4
alert_email=subscribe@andreasheumaier.de


# Notify Hook
notify() {
 echo 'send email '
 cat $runDir/mail_template.txt | mail -s "Service Alert" $alert_email
}

# Generic log function.
log() {
  echo "$1" >> "$logFile"
}

service_state() {
  if $service_command status; then
    return 0
  else
    return 1
  fi
}

service_restart() {
  x=1; while [ $x -le $service_retries ]
  do
    if ! service_state; then
    $service_command stop
    $service_command start
    sleep 10
    x=$(( $x + 1 ))
    fi
  done

  notify
}

# Tis is the executed alert logic for the loop
checkCommands() {
  if service_state; then
    log "OK $SERVICE is fine"
  else
    log "ERROR restarting $SERVICE"
    service_restart
  fi
}

# This is the main daemon loop
loop() {

  now=`date +%s`

  if [ -z $last ]; then
    last=`date +%s`
  fi

  # Do everything you need the daemon to do.
  checkCommands

  # Check to see how long we actually need to sleep for. If we want this to run
  # once a minute and it's taken more than a minute, then we should just run it
  # anyway.
  last=`date +%s`

  # Set the sleep interval
  if [[ ! $((now-last+runInterval+1)) -lt $((runInterval)) ]]; then
    sleep $((now-last+runInterval))
  fi

  # Startover
  loop
}

show_help() {
   echo "
   #Usage:
       -h                       display this help and exit
       -s SERVICE               service to check
       -i INTERVALL              service check intervall in sec, default to 30s
       -r RETRY_COUNT           How often the service should be restarted, default to 4
       -c RETRY_COUNT_INTERVALL Wait time in sec between restart check retries, defaults to 30s
  "
}

## main runner
unset name
while getopts ":s:i:r:c:m:" opt; do
  case $opt in
    s)
      service=$OPTARG
      ;;
    i)
      runInterval=$OPTARG
      ;;
    r)
      service_retries=$OPTARG
      ;;
    m)
      alert_email=$OPTARG
      ;;
    ?)
      show_help >&2
      exit 1
      ;;
  esac
done

if [ $OPTIND -eq 1 ]
then
   show_help
   exit
else
  echo $$ > /opt/guardian/guard.pid
  loop
fi

